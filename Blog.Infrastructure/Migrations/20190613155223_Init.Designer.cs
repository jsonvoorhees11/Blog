// <auto-generated />
using System;
using Blog.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Blog.Infrastructure.Migrations
{
    [DbContext(typeof(BlogDbContext))]
    [Migration("20190613155223_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Blog.DataAccess.Entities.Article", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuthorId");

                    b.Property<string>("Content");

                    b.Property<long>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0L);

                    b.Property<long>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0L);

                    b.Property<string>("Recap");

                    b.Property<string>("Slug")
                        .IsRequired();

                    b.Property<string>("ThumbnailImageUrl");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Slug")
                        .HasName("Unique_Slug");

                    b.HasIndex("AuthorId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = "9a574346-a3a5-4860-a3bd-54be358ba236",
                            AuthorId = "f6eb594c-4c06-4dec-9412-133c2d32a549",
                            Content = "I don't know how it works either",
                            CreatedDate = 1560182949L,
                            LastModifiedDate = 1560182949L,
                            Recap = ".NET compiler is really complicated",
                            Slug = "how-net-compiler-work",
                            ThumbnailImageUrl = "https://localhost:7070/api/fileUploader/netcompiler.png",
                            Title = "How .NET compiler work?"
                        },
                        new
                        {
                            Id = "47eef876-5eb2-442f-913c-6ad098864f9e",
                            AuthorId = "87913df7-7dc9-45bb-a486-6be3a902f8c0",
                            Content = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit",
                            CreatedDate = 1560182949L,
                            LastModifiedDate = 1560182949L,
                            Recap = "Angular definitely",
                            Slug = "angular-reactjs-and-vuejs-which-to-choose",
                            ThumbnailImageUrl = "https://localhost:7070/api/fileUploader/angular-is-the-best.png",
                            Title = "Angular, ReactJS and VueJs, which to choose?"
                        },
                        new
                        {
                            Id = "f2e240c4-3e7e-4c87-93ce-c95ffa2941c2",
                            AuthorId = "f6eb594c-4c06-4dec-9412-133c2d32a549",
                            Content = "At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga",
                            CreatedDate = 1560182949L,
                            LastModifiedDate = 1560182949L,
                            Recap = ".NET Core is sky-rocketing",
                            Slug = "the-rise-of-net-core",
                            ThumbnailImageUrl = "https://localhost:7070/api/fileUploader/netcore.png",
                            Title = "The rise of .NET Core"
                        },
                        new
                        {
                            Id = "4bcfe398-d377-43ce-a134-99f0823511d7",
                            AuthorId = "f6eb594c-4c06-4dec-9412-133c2d32a549",
                            Content = "Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur",
                            CreatedDate = 1560182949L,
                            LastModifiedDate = 1560182949L,
                            Recap = "Rust is becoming another trend",
                            Slug = "rust-is-becoming-another-trend",
                            ThumbnailImageUrl = "https://localhost:7070/api/fileUploader/rustland.png",
                            Title = "Rust is becoming another trend"
                        });
                });

            modelBuilder.Entity("Blog.DataAccess.Entities.ArticleCategory", b =>
                {
                    b.Property<string>("ArticleId");

                    b.Property<string>("CategoryId");

                    b.HasKey("ArticleId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ArticleCategory");

                    b.HasData(
                        new
                        {
                            ArticleId = "9a574346-a3a5-4860-a3bd-54be358ba236",
                            CategoryId = "15838af4-3566-4438-a7fa-5dbc2d97af80"
                        },
                        new
                        {
                            ArticleId = "47eef876-5eb2-442f-913c-6ad098864f9e",
                            CategoryId = "15838af4-3566-4438-a7fa-5dbc2d97af80"
                        },
                        new
                        {
                            ArticleId = "f2e240c4-3e7e-4c87-93ce-c95ffa2941c2",
                            CategoryId = "15838af4-3566-4438-a7fa-5dbc2d97af80"
                        },
                        new
                        {
                            ArticleId = "f2e240c4-3e7e-4c87-93ce-c95ffa2941c2",
                            CategoryId = "f9e04123-f0c7-404f-b7bd-c0c03db0e5c3"
                        },
                        new
                        {
                            ArticleId = "4bcfe398-d377-43ce-a134-99f0823511d7",
                            CategoryId = "f9e04123-f0c7-404f-b7bd-c0c03db0e5c3"
                        });
                });

            modelBuilder.Entity("Blog.DataAccess.Entities.ArticleTag", b =>
                {
                    b.Property<string>("ArticleId");

                    b.Property<string>("TagId");

                    b.HasKey("ArticleId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ArticleTags");

                    b.HasData(
                        new
                        {
                            ArticleId = "9a574346-a3a5-4860-a3bd-54be358ba236",
                            TagId = "3a045768-5dfc-4a46-b673-7d10f7da6ee8"
                        },
                        new
                        {
                            ArticleId = "9a574346-a3a5-4860-a3bd-54be358ba236",
                            TagId = "5a10c508-b548-42e7-a968-a487b66c6984"
                        },
                        new
                        {
                            ArticleId = "9a574346-a3a5-4860-a3bd-54be358ba236",
                            TagId = "46a0b627-93c7-4b95-a029-b788ad887b1e"
                        },
                        new
                        {
                            ArticleId = "47eef876-5eb2-442f-913c-6ad098864f9e",
                            TagId = "5a10c508-b548-42e7-a968-a487b66c6984"
                        },
                        new
                        {
                            ArticleId = "4bcfe398-d377-43ce-a134-99f0823511d7",
                            TagId = "3a045768-5dfc-4a46-b673-7d10f7da6ee8"
                        },
                        new
                        {
                            ArticleId = "4bcfe398-d377-43ce-a134-99f0823511d7",
                            TagId = "46a0b627-93c7-4b95-a029-b788ad887b1e"
                        },
                        new
                        {
                            ArticleId = "f2e240c4-3e7e-4c87-93ce-c95ffa2941c2",
                            TagId = "5a10c508-b548-42e7-a968-a487b66c6984"
                        });
                });

            modelBuilder.Entity("Blog.DataAccess.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias")
                        .IsRequired();

                    b.Property<long>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0L);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<long>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0L);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ParentId");

                    b.HasKey("Id");

                    b.HasAlternateKey("Alias")
                        .HasName("Unique_Category_Alias");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "15838af4-3566-4438-a7fa-5dbc2d97af80",
                            Alias = "NET-FRAMEWORK",
                            CreatedDate = 1560182949L,
                            Description = "Articles about the .NET/.NET Core framework",
                            LastModifiedDate = 1560182949L,
                            Name = ".NET/.NET Core Framework",
                            ParentId = "289ebc79-5307-4c89-ac1b-025a780eaa73"
                        },
                        new
                        {
                            Id = "f9e04123-f0c7-404f-b7bd-c0c03db0e5c3",
                            Alias = "JAVASCRIPT",
                            CreatedDate = 1560182949L,
                            Description = "Articles about Javascript and its libraries",
                            LastModifiedDate = 1560182949L,
                            Name = "Javascript",
                            ParentId = "289ebc79-5307-4c89-ac1b-025a780eaa73"
                        },
                        new
                        {
                            Id = "289ebc79-5307-4c89-ac1b-025a780eaa73",
                            Alias = "TECHNICAL",
                            CreatedDate = 1560182949L,
                            Description = "Articles about technical topics",
                            LastModifiedDate = 1560182949L,
                            Name = "Technical"
                        });
                });

            modelBuilder.Entity("Blog.DataAccess.Entities.Comment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArticleId");

                    b.Property<string>("Content");

                    b.Property<long>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0L);

                    b.Property<string>("ReaderId");

                    b.Property<string>("Recap");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ReaderId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = "a4668006-e3f5-4038-a852-6c764913a976",
                            ArticleId = "47eef876-5eb2-442f-913c-6ad098864f9e",
                            Content = "Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam",
                            CreatedDate = 1560182949L,
                            ReaderId = "c4fa13de-f446-411c-9ed9-d6a5119b7b96",
                            Recap = "This article is useful"
                        },
                        new
                        {
                            Id = "351ecc42-2de5-4835-bdb4-dc0da4233acc",
                            ArticleId = "9a574346-a3a5-4860-a3bd-54be358ba236",
                            Content = "Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain",
                            CreatedDate = 1560182949L,
                            ReaderId = "27fe5a64-0032-4d11-9225-ecc9d54b8a52",
                            Recap = "It's basic"
                        },
                        new
                        {
                            Id = "4306d506-b505-4581-886f-016eda2bcfa9",
                            ArticleId = "47eef876-5eb2-442f-913c-6ad098864f9e",
                            Content = "Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis",
                            CreatedDate = 1560182949L,
                            ReaderId = "27fe5a64-0032-4d11-9225-ecc9d54b8a52",
                            Recap = "I prefer Angular"
                        });
                });

            modelBuilder.Entity("Blog.DataAccess.Entities.Reader", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("IpAddress")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Readers");

                    b.HasData(
                        new
                        {
                            Id = "27fe5a64-0032-4d11-9225-ecc9d54b8a52",
                            IpAddress = "10.125.21.2",
                            Name = "Xiao Qin Fang"
                        },
                        new
                        {
                            Id = "c4fa13de-f446-411c-9ed9-d6a5119b7b96",
                            IpAddress = "120.22.31.55",
                            Name = "Raccoon"
                        });
                });

            modelBuilder.Entity("Blog.DataAccess.Entities.Tag", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias")
                        .IsRequired();

                    b.Property<long>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0L);

                    b.Property<long>("LastModifiedDate");

                    b.HasKey("Id");

                    b.HasAlternateKey("Alias")
                        .HasName("Unique_Tag_Alias");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = "3a045768-5dfc-4a46-b673-7d10f7da6ee8",
                            Alias = "dotnet",
                            CreatedDate = 1560182949L,
                            LastModifiedDate = 1560182949L
                        },
                        new
                        {
                            Id = "46a0b627-93c7-4b95-a029-b788ad887b1e",
                            Alias = "js",
                            CreatedDate = 1560182949L,
                            LastModifiedDate = 1560182949L
                        },
                        new
                        {
                            Id = "5a10c508-b548-42e7-a968-a487b66c6984",
                            Alias = "technical",
                            CreatedDate = 1560182949L,
                            LastModifiedDate = 1560182949L
                        });
                });

            modelBuilder.Entity("Blog.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<long>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0L);

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<long>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0L);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = "87913df7-7dc9-45bb-a486-6be3a902f8c0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "58ddc1cc-0426-4657-8da6-6af807a39a27",
                            CreatedDate = 1560182949L,
                            Email = "lolgag@9gag.com",
                            EmailConfirmed = false,
                            LastModifiedDate = 1560182949L,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "f6eb594c-4c06-4dec-9412-133c2d32a549",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d7a79900-7ca0-447b-9b95-b9c675d927f9",
                            CreatedDate = 1560182949L,
                            Email = "tech@reddit.com",
                            EmailConfirmed = false,
                            LastModifiedDate = 1560182949L,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Blog.DataAccess.Entities.Article", b =>
                {
                    b.HasOne("Blog.DataAccess.Entities.User", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorId");
                });

            modelBuilder.Entity("Blog.DataAccess.Entities.ArticleCategory", b =>
                {
                    b.HasOne("Blog.DataAccess.Entities.Article", "Article")
                        .WithMany("ArticleCategories")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Blog.DataAccess.Entities.Category", "Category")
                        .WithMany("ArticleCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Blog.DataAccess.Entities.ArticleTag", b =>
                {
                    b.HasOne("Blog.DataAccess.Entities.Article", "Article")
                        .WithMany("ArticleTags")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Blog.DataAccess.Entities.Tag", "Tag")
                        .WithMany("ArticleTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Blog.DataAccess.Entities.Category", b =>
                {
                    b.HasOne("Blog.DataAccess.Entities.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Blog.DataAccess.Entities.Comment", b =>
                {
                    b.HasOne("Blog.DataAccess.Entities.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId");

                    b.HasOne("Blog.DataAccess.Entities.Reader", "Reader")
                        .WithMany("Comments")
                        .HasForeignKey("ReaderId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
